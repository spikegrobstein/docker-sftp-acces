#! /usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
shopt -s nullglob
shopt -s dotglob

warn() {
  printf "%s\n" "$@" >&2
}

die() {
  warn "$@"
  exit 1
}

db::add() {
  local userfile="$1"
  local username="$2"
  local email="$3"
  local gh_username="$4"

  if db::username_exists "$userfile" "$username"; then
    warn "User already exists in DB. not adding."
    return
  fi

  warn "Adding user $username to DB."

  printf "\n%s|%s|%s" "$username" "$email" "$gh_username" \
    >> "$userfile"
}

db::username_exists() {
  local userfile="$1"
  local username="$2"

  local usernames
  usernames="$( db::list_usernames "$userfile" )"
  mapfile -t usernames \
    <<< "$usernames"

  local u
  for u in "${usernames[@]}"; do
    if [[ "$u" = "$username" ]]; then
      # found it.
      return 0
    fi
  done

  # not found.
  return 1
}

# output a list of usernames in the given userfile
# one per line. deduped and sorted.
db::list_usernames() {
  local userfile="$1"

  if [[ ! -s "$userfile" ]]; then
    warn "Userfile contains no data."
    return
  fi

  local usernames=()
  local lines
  mapfile -t lines \
    < "$userfile"

  local line
  local username
  for line in "${lines[@]}"; do
    username="$( cut -d '|' -f 1 <<< "$line" )"
    usernames+=("$username")
  done

  printf "%s\n" "${usernames[@]}" \
    | sort -u
}

update_user() {
  local username="$1"
  local gh_username="$2"

  local homedir="/home/$username"

  # set up ssh keys for the user
  mkdir -p "$homedir/.ssh"

  curl "https://github.com/${gh_username}.keys" \
    >> "$homedir/.ssh/authorized_keys"

  cat "$homedir/.ssh/authorized_keys" \
    | sort -u \
    | sponge "$homedir/.ssh/authorized_keys"

  warn "Updated keys for $username"
  # cat "$homedir/.ssh/authorized_keys"

  # make sure the user owns their stuff
  for d in "$homedir"/*; do
    if [[ -L "$d" ]]; then
      # skip any symlinks
      continue
    fi

    warn "Ensuring ownership of $d"
    chown -R "${username}:${username}" "$d"
  done

  pushd "$homedir" &> /dev/null

  local dir_name 

  # create the mounts
  for d in /mounts/*; do
    dir_name=$( basename "$d" )

    if [[ -L "$dir_name" ]]; then
      continue
    fi

    ln -s "$d"
  done

  popd &> /dev/null
}

create_user() {
  local username="$1"
  local email="$2"
  local gh_username="$3"

  gh_username="$( tr -d $'\n' <<< "$gh_username" )"

  local homedir="/home/$username"

  warn "Creating user: $username"

  # set -x

  if useradd \
    -d "$homedir" \
    -m \
    -s /bin/rbash \
    -c "$email" \
    "$username"
  then
    warn "User created!"

    db::add "$userfile" "$username" "$email" "$gh_username"
  fi

  backup_accounts

  update_user "$username" "$gh_username"

  # set +x
}

# copy account files into data directory for persistence
backup_accounts() {
  cp "${account_files[@]}" "$datadir/"
}

# copy account files from data directory to restore
restore_accounts() {
  if [[ ! -s "/data/passwd" ]]; then
    warn "No accounts to restore."

    return
  fi
  cp /data/* /etc/

  chown root:root "${account_files[@]}"
  chmod 600 /etc/shadow /etc/shadow-
  chmod 640 /etc/passwd /etc/passwd- /etc/group /etc/group-
}

action_init() {
  local userdata

  # first, restore accounts
  restore_accounts

  if [[ -s "$userfile" ]]; then
    mapfile -t users < "$userfile"

    for user in "${users[@]}"; do
      if [[ -z "$user" || "$user" = "#"* ]]; then
        continue
      fi

      userdata="$( tr '|' $'\n' <<< "$user" )"
      mapfile -t userdata <<< "$userdata"

      create_user "${userdata[@]}"
    done
  fi

  exec /usr/sbin/sshd -D -e
}

action_add() {
  if [[ "$#" -ne 3 ]]; then
    die "Incorrect usage"
  fi

  create_user "$@"
}

mountsdir="/mounts"

userfile=/users.txt

datadir="/data"
account_files=(
  /etc/{shadow,group,passwd}
  /etc/{shadow,group,passwd}-
)

# userfile looks like:
# <username>|<email>|<github-username>

if [[ -z "$1" ]]; then
  die "USAGE: $0 <subcommand> [ <arg> ... ]"
fi

action="$1"
shift

case "$action" in
  init)
    action_init "$@"
    ;;

  add)
    action_add "$@"
    ;;

  *)
    die "Unknown subcommand: $action"
esac

