#! /usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset
shopt -s nullglob
shopt -s dotglob

warn() {
  if [[ "$#" -eq 0 ]]; then
    return
  fi

  printf "%s\n" "$@" >&2
}

die() {
  warn "$@"
  exit 1
}

db::add() {
  local userfile="$1"
  local username="$2"
  local email="$3"
  local gh_username="$4"

  if db::username_exists "$userfile" "$username"; then
    warn "User already exists in DB. not adding."
    return
  fi

  warn "Adding user $username to DB."

  printf "\n%s|%s|%s" "$username" "$email" "$gh_username" \
    >> "$userfile"
}

db::username_exists() {
  local userfile="$1"
  local username="$2"

  local usernames
  usernames="$( db::list_usernames "$userfile" )"
  mapfile -t usernames \
    <<< "$usernames"

  local u
  for u in "${usernames[@]}"; do
    if [[ "$u" = "$username" ]]; then
      # found it.
      return 0
    fi
  done

  # not found.
  return 1
}

# output a list of usernames in the given userfile
# one per line. deduped and sorted.
db::list_usernames() {
  local userfile="$1"

  if [[ ! -s "$userfile" ]]; then
    warn "Userfile contains no data."
    return
  fi

  local usernames=()
  local lines
  mapfile -t lines \
    < "$userfile"

  local line
  local username
  for line in "${lines[@]}"; do
    username="$( cut -d '|' -f 1 <<< "$line" )"
    usernames+=("$username")
  done

  printf "%s\n" "${usernames[@]}" \
    | sort -u
}

users::list_existing() {
  getent passwd \
    | sed -E 's|:.+$||' \
    | sort -u \
    | grep -vE '^(root|sshd)$'
}

dedupe_user_keys() {
  local username="$1"

  local homedir="/home/$username"

  cat "$homedir/.ssh/authorized_keys" \
    | sort -u \
    | sponge "$homedir/.ssh/authorized_keys"

}

validate_key() {
  local key="$1"

  ssh-keygen -l -f - <<< "$key"
}

# synchronize the given user's keys with github
# this will only ensure that whatever is in github exists locally.
# it will not delete keys. it's strictly additive.
sync_user_keys() {
  local username="$1"
  local gh_username="${2:-""}"

  local homedir="/home/$username"

  # set up ssh keys for the user
  mkdir -p "$homedir/.ssh"

  if [[ -z "$gh_username" ]]; then
    warn "Skipping sync of ssh keys. User $username has no github config."
    return
  fi

  warn "Fetching keys for $username (github: $gh_username)"
  curl \
    --silent \
    --show-error \
    "https://github.com/${gh_username}.keys" \
    >> "$homedir/.ssh/authorized_keys"

  # dedupe the authorized_keys file.
  dedupe_user_keys "$username"

  warn "Updated keys for $username"
}

fix_ownership() {
  local username="$1"

  local homedir="/home/$username"

  local d
  # make sure the user owns their stuff
  for d in "$homedir"/*; do
    if [[ -L "$d" ]]; then
      # skip any symlinks
      continue
    fi

    warn "Ensuring ownership of $d"
    chown -R "${username}:${username}" "$d"
  done
}

sync_mounts() {
  local username="$1"

  local homedir="/home/$username"

  ( # subshell to ensure we're not left checked out of the directory
    pushd "$homedir" &> /dev/null

    local dir_name 

    # create the mounts
    for d in "$mountsdir"/*; do
      dir_name=$( basename "$d" )

      if [[ -L "$dir_name" ]]; then
        continue
      fi

      ln -s "$d"
    done
  )
}

update_user() {
  local username="$1"
  local gh_username="$2"

  sync_user_keys "$username" "$gh_username"
  fix_ownership "$username"
  sync_mounts "$username"
}

create_user() {
  local username="$1"
  local email="$2"
  local gh_username="$3"

  gh_username="$( tr -d $'\n' <<< "$gh_username" )"

  local homedir="/home/$username"

  warn "Creating user: $username"

  # set -x

  if adduser \
    --home "$homedir" \
    --gecos "$email" \
    --disabled-password \
    "$username"
  then
    warn "User created!"

    # add the user to the user database file
    db::add "$userfile" "$username" "$email" "$gh_username"
  fi

  backup_accounts

  update_user "$username" "$gh_username"

  # set +x
}

# copy account files into data directory for persistence
backup_accounts() {
  mkdir -p "$userdata_dir"
  cp "${account_files[@]}" "$userdata_dir/"
}

# copy account files from data directory to restore
restore_accounts() {
  if [[ ! -s "$userdata_dir/passwd" ]]; then
    warn "No accounts to restore."

    return
  fi
  cp "$userdata_dir"/* /etc/

  chown root:root "${account_files[@]}"
  chmod 600 /etc/shadow /etc/shadow-
  chmod 640 /etc/passwd /etc/passwd- /etc/group /etc/group-
}

configure_host_keys() {
  if [[ ! -d "$hostkey_dir" ]]; then
    warn "No existing ssh host keys backed up. Re-generating"

    # if the local backup doesn't exist, make one.
    mkdir -p "$hostkey_dir"

    warn "Generating..."
    rm /etc/ssh/ssh_host_*
    ssh-keygen -A

    warn "Backing up new keys to $hostkey_dir"
    cp /etc/ssh/ssh_host_* "$hostkey_dir/"
  fi

  warn "Restoring host keys."

  # then copy everything from the local backup into the system
  cp "$hostkey_dir"/* /etc/ssh/

  # all host keys should be owned by root
  chown root:root /etc/ssh/ssh_host_*

  # all private keys are 600
  chmod 600 /etc/ssh/ssh_host_*_key

  # all public keys are 644
  chmod 644 /etc/ssh/ssh_host_*_key.pub
}

subcommand::init() {
  local userdata

  # first, restore accounts and ensure persistent host keys
  restore_accounts
  configure_host_keys

  if [[ -s "$userfile" ]]; then
    mapfile -t users \
      < "$userfile"

    local user
    for user in "${users[@]}"; do
      if [[ -z "$user" || "$user" = "#"* ]]; then
        continue
      fi

      userdata="$( tr '|' $'\n' <<< "$user" )"
      mapfile -t userdata <<< "$userdata"

      create_user "${userdata[@]}"
    done
  fi

  exec /usr/sbin/sshd -D -e
}

subcommand::add-user() {
  local username="$1"
  local email="$2"
  local gh_username="${3:-}"

  create_user "$username" "$email" "$gh_username"
}

# update all of the users on the system
# this is done by re-reading the userdb
# and running the update_user() function on each user
subcommand::sync() {
  local userdata

  local username
  local gh_username

  if [[ -s "$userfile" ]]; then
    mapfile -t users \
      < "$userfile"

    local user
    for user in "${users[@]}"; do
      if [[ -z "$user" || "$user" = "#"* ]]; then
        continue
      fi

      userdata="$( tr '|' $'\n' <<< "$user" )"
      mapfile -t userdata <<< "$userdata"


      username="${userdata[0]}"
      gh_username="${userdata[2]}"

      update_user "$username" "$gh_username"
    done
  fi
}

subcommand::add-key() {
  local username="$1"
  local key="$2"

  local homedir="/home/$username"

  if ! validate_key "$key"; then
    # bad key
    return 1
  fi

  printf "\n%s" "$key" \
    >> "$homedir/.ssh/authorized_keys"

  dedupe_user_keys "$username"

  warn "Appended key for $username"
}

subcommand::list-users() {
  users::list_existing
}

mountsdir="/mounts"

userfile=/users.txt

datadir="/data"

userdata_dir="$datadir/users"

account_files=(
  /etc/{shadow,group,passwd}
  /etc/{shadow,group,passwd}-
)

# this directory contains /etc/ssh/ssh_host_*
hostkey_dir="$datadir/host_keys"

# userfile looks like:
# <username>|<email>|<github-username>

print_usage() {
  warn "USAGE: $0 <subcommand> [ <arg> ... ]"
}

if [[ -z "$1" ]]; then
  print_usage
  die
fi

action="$1"
shift

subcommand_function="subcommand::${action}"

# make sure subcommand is defined
if ! fn="$( type -t "$subcommand_function" )"; then
  die "Unknown subcommand: $action"
fi

# make sure it's a function (quick security check)
if [[ "$fn" != "function" ]]; then
  die "Unknown subcommand: $action"
fi

# call the subcommand handler
"$subcommand_function" "$@"

